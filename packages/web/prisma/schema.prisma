// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Size {
    s
    m
    l
    xl
    xxl
}

enum Color {
    red
    green
    blue
    yellow
    black
    white
}

enum Status {
    pending
    processing
    shipped
    delivered
    canceled
    refunded
}

model Address {
    id      Int     @id @default(autoincrement())
    country String  @db.Varchar(255)
    state   String  @db.VarChar(255)
    postcode Int 
    street  String  @db.VarChar(255)
    hnumber String  @db.VarChar(8)
}

model Producer {
    id      Int     @id @default(autoincrement())
    name    String  @unique
    email   String  @unique @db.VarChar(320)
    phone   String? @db.VarChar(20)
    addressId Int? 
    
    address Address? @relation(fields: [addressId], references [id])

    ducks Duck[]
}

model Brand {
    id          Int     @id @default(autoincrement())
    name        String  @unique @db.VarChar(255)
    description String?

    ducks Duck[]
}

model Origin {
    id    Int    @id @default(autoincrement())
    name  String @unique @db.VarChar(3)
    ducks Duck[]
}

// Duck model created from the schema provided in lib/model
// Attributes like color, size, material brand, etc. are provided as relations - may be changed to strings for simplicity
model Duck {
    id          Int    @id @default(autoincrement())
    name        String @unique db.VarChar(255)
    price       Int
    color       Color
    material    String db.VarChar(255)
    size        Size
    brandId     Int?
    originId    Int
    producerId  Int
    weight      Float
    description String

    brand    Brand?   @relation(fields: [brandId], references: [id])
    origin   Origin   @relation(fields: [originId], references: [id])
    producer Producer @relation(fields: [producerId], references: [id])

    orderItems OrderItem[]

    // for filtering by attributes, indexes may be expanded
    @@index([material])
    @@index([size])
    @@index([color])
}

model Order {
    id          Int         @id @default(autoincrement())
    createdAt   Timestamp    @default(now())
    totalPrice  Int
    isCompleted Status       @default(pending)
    items       OrderItem[]
    customerId  Int         @unique

    customer Customer @relation(fields: [customerId], references: [id])

    paypalTransaction PaypalTransaction?

    // for performance when ordering by creation date or completion status
    @@index([createdAt])
    @@index([isCompleted])
}

// Subtable of Order to store customer information for delievery; not intended to be used for authentication
model Customer {
    id        Int    @id @default(autoincrement())
    firstName String
    lastName  String
    email     String
    phone     String
    homeAdressId?  Int
    billingAdressId Int

    homeAddress Address? @relation(fields: [homeAddressId], references [id])
    billingAddress Address? @relation(fields: [billingAddressId], references [id])

    order Order?
}

// table of PayPal transactionIds
model PaypalTransaction {
    id            Int    @id @default(autoincrement())
    orderId       Int    @unique
    transactionId String @unique // Unique identifier for the transaction from PayPal

    order Order @relation(fields: [orderId], references: [id])

    // for performance when querying by order or status
    @@index([orderId])
}

model OrderItem {
    id       Int @id @default(autoincrement())
    orderId  Int
    duckId   Int
    quantity Int @default(1)

    order Order @relation(fields: [orderId], references: [id])
    duck  Duck  @relation(fields: [duckId], references: [id])
}
